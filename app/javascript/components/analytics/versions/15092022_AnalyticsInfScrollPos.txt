import { createConsumer } from '@rails/actioncable'
import React, { useContext, useEffect, useState } from 'react'
import InfiniteScroll from 'react-infinite-scroll-component'
import * as timeago from 'timeago.js'
import lineChartPlaceholder from '../../../assets/images/line_chart_placeholder'
import worldMapPlaceholder from '../../../assets/images/world_map_placeholder'
import LayoutContext from '../../packs/context/LayoutContext'
import { formatDate } from '../util/formatDate'
import api from '../util/linkhiveApi'

const consumer = createConsumer()
const LIMIT = 25

// SEMI WORKING VERSION of infinite scroll with position memory, however, when clicking back to the home page, the page will scroll up automatically and somehow will cause an issue due to the local storage used in this file
const Analytics = () => {
  const { isMobile } = useContext(LayoutContext)

  const [loading, setLoading] = useState(false)
  const [urlData, setUrlData] = useState({})
  const [urlStats, setUrlStats] = useState([])
  const [urlVisitCount, setUrlVisitCount] = useState(0)

  const slug = window.location.pathname.substring(3)

  /* -------------- INFINITE SCROLL ------------- */

  const callUrl = () => {
    // setTimeout(() => {
    !loading &&
      api.getInfScrollUrlData(slug, urlStats.length, 0).then(r => {
        const newArr = urlStats.concat(
          Array.from(r.data.data.url.inf_statistics)
        )
        setUrlStats([...newArr])
      })
    // }, 500)
  }

  /* --------------- INITIATE PAGE -------------- */
  useEffect(() => {
    const prevSect = JSON?.parse(localStorage?.getItem('prev_sect'))?.[slug]
    const footer = document.getElementsByClassName('footer')[0]

    setLoading(true)
    api
      .getInfScrollUrlData(
        slug,
        0,
        prevSect?.prev_take
          ? prevSect?.prev_take < LIMIT
            ? LIMIT
            : prevSect.prev_take
          : 0
      )
      .then(r => {
        setUrlData(r.data.data.url)
        setUrlStats(r.data.data.url.inf_statistics)
        setUrlVisitCount(r.data.data.url.visit_count)
        setTimeout(() => {
          setLoading(false)
          prevSect?.prev_take < LIMIT ? null : footer.scrollIntoView()
        }, 1000)
      })

    consumer.subscriptions.create(
      { channel: 'UrlVisitChannel', room: `url_visit:${slug}` },
      {
        received(data) {
          const stats = JSON.parse(data)
          setUrlStats(_urlStats => [stats, ..._urlStats])
          setUrlVisitCount(stats.count)
        },
      }
    )
  }, [])

  const setScrollStorage = () => {
    let elem = document.getElementById('tbody')
    if (elem?.children?.length > 0) {
      const lastEl = Array?.from(elem?.children)
        ?.filter(child => {
          const rect = child?.getBoundingClientRect()
          return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <=
              (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <=
              (window.innerWidth || document.documentElement.clientWidth)
          )
        })
        .pop()
      const prevSect = JSON?.parse(localStorage?.getItem('prev_sect')) ?? {}
      prevSect[`${slug}`] = {
        scroll_pos: window.pageYOffset,
        prev_take: Number(lastEl?.id) ?? 0,
      }
      localStorage?.setItem('prev_sect', JSON.stringify(prevSect))
      return lastEl
    }
  }

  /* -------------- TRIGGER SCROLL -------------- */

  /* -------------------------------------------- */
  /*                    CHARTS                    */
  /* -------------------------------------------- */
  /* -------------------------------------------- */
  /*                    GEOMAP                    */
  /* -------------------------------------------- */

  const TableRow = ({ data, index }) => {
    return (
      <tr id={index} key={`${data.referrer}-${index}`}>
        <td className="col-lg-4 col-md-4 col-sm-4 col-9">{data.referrer}</td>
        <td
          className="col-lg-4 col-md-4 col-sm-4 col-3"
          style={{ textAlign: isMobile ? 'right' : 'center' }}
        >
          {data.user_agent?.match(/^[a-zA-Z]+/g).join()}
        </td>
        {!isMobile && (
          <>
            <td
              className="col-lg-2 col-md-2 col-sm-2"
              style={{ textAlign: 'center' }}
            >
              {data.country}
            </td>
            <td
              className="col-lg-2 col-md-2 col-sm-2"
              style={{ textAlign: 'right' }}
            >
              {formatDate(new Date(data.created_at))}
            </td>
          </>
        )}
      </tr>
    )
  }

  return (
    <div className="analytics-container">
      <div className="analytics-metadata-section white-background padded-container">
        <p className="bigger-font">
          Analytics data for&nbsp;
          <a href={urlData.shortened_link}>{urlData.slug}</a>
        </p>
        <p>
          Created&nbsp;
          {timeago.format(urlData.created_at)}
        </p>
        <p>
          Destination URL:&nbsp;
          <a href={urlData.url} target="_blank">
            {urlData.url}
          </a>
        </p>
      </div>

      <div className="analytics-data-section white-background padded-container row">
        <div className="col-lg-3 col-md-3 col-sm-3 col-3">
          <div className="bigger-font">
            <b>{urlVisitCount}</b>
            <br />
          </div>
          <b>Clicks</b>
        </div>

        <div className="col-lg-9 col-md-9 col-sm-9 col-9 timeframe">
          <b className="">Timeframe: &nbsp;</b>
          <button className="realtime" type="button">
            Realtime
          </button>
        </div>
      </div>

      <div
        className="row padded-container white-background"
        // style={{ placeContent: isMobile ? 'center' : null }}
      >
        <img
          className="col-lg-6 col-md-6 col-sm-6 col-12 image-container"
          src={lineChartPlaceholder}
          width="100%"
          height="100%"
        />
        <img
          className="col-lg-6 col-md-6 col-sm-6 col-12 image-container"
          src={worldMapPlaceholder}
          width="100%"
          height="100%"
        />
      </div>

      <div className="analytics-statistics-section white-background padded-container row">
        <InfiniteScroll
          dataLength={urlStats.length}
          next={callUrl}
          hasMore={true}
          loader={
            urlStats.length !== urlVisitCount && (
              <div style={{ textAlign: 'center' }}>Loading...</div>
            )
          }
          // initialScrollY={
          //   // JSON?.parse(localStorage?.getItem('prev_sect'))?.[`${slug}`]
          //   //   ?.scroll_pos ?? 0
          //   10000
          // }
          style={{ overflow: 'initial' }}
          onScroll={() => setScrollStorage()}
          scrollThreshold={1.0}
        >
          <table className="table table-hover analytics-table">
            <thead>
              <tr>
                <th className="col-lg-4 col-md-4 col-sm-4 col-9">Referrer</th>
                <th
                  className="col-lg-4 col-md-4 col-sm-4 col-3"
                  style={{ textAlign: isMobile ? 'right' : 'center' }}
                >
                  Browser
                </th>
                {!isMobile && (
                  <>
                    <th
                      className="col-lg-2 col-md-2 col-sm-2"
                      style={{ textAlign: 'center' }}
                    >
                      Country
                    </th>
                    <th
                      className="col-lg-2 col-md-2 col-sm-2"
                      style={{ textAlign: 'right' }}
                    >
                      Date/Time
                    </th>
                  </>
                )}
              </tr>
            </thead>
            <tbody id={'tbody'}>
              {urlStats &&
                urlStats.map((stat, i) => <TableRow data={stat} index={i} />)}
            </tbody>
          </table>
        </InfiniteScroll>
      </div>
    </div>
  )
}

export default Analytics
